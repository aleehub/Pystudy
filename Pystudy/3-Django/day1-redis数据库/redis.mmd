Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Redis
> align=`center`,collapsed=`true`


## Redis数据库操作
> collapsed=`true`


### 服务器端
> collapsed=`true`


#### 开启服务端
- NOTE
<pre>redis-server</pre>

#### 查看帮助文档
- NOTE
<pre>redis-server --help</pre>

#### 查看服务器进程
- NOTE
<pre>ps aux | grep redis</pre>

#### 杀死 redis服务器
- NOTE
<pre>sudo kill -9 pid</pre>

#### 指定加载的配置文件
- NOTE
<pre>sudo redis-server /etc/redis/redis.conf 指定加载的配置文件</pre>

### 客户端
> collapsed=`true`


#### 开启客户端
- NOTE
<pre>redis-cli</pre>

#### 查看帮助文档
- NOTE
<pre>redis-cli --help</pre>

#### 连接redis
- NOTE
<pre>redis-cli</pre>

#### 运行测试
- NOTE
<pre>ping</pre>

#### 切换数据库
- NOTE
<pre>select 10 数字为数据库序号 从0~15</pre>

#### 键命令
> collapsed=`true`


##### 查找键
- NOTE
<pre>参数⽀持正则表达式

    keys pattern

例1：查看所有键

    keys *
    
例2：查看名称中包含a的键

keys 'a*'
</pre>

##### 判断键存在
- NOTE
<pre>exists key1

例3：判断键a1是否存在

    exists a1
</pre>

##### 查看键类型
- NOTE
<pre>type key

例4：查看键a1的值类型，为redis⽀持的五种类型中的⼀种

    type a1
</pre>

##### 删除键
- NOTE
<pre>del key1 key2 ...

例5：删除键a2、a3

    del a2 a3
</pre>

##### 设置过期时间
- NOTE
<pre>如果没有指定过期时间则⼀直存在，直到使⽤DEL移除

    expire key seconds

例6：设置键'a1'的过期时间为3秒

    expire 'a1' 3
</pre>

##### 查看有效时间
- NOTE
<pre>ttl key

例7：查看键'bb'的有效时间

    ttl bb
</pre>

## Redis安装
> leftSide=`true`


### Linux

#### step1:下载
- NOTE
<pre>下载源码，源码安装

wget http://download.redis.io/releases/redis-4.0.9.tar.gz</pre>

#### step2:解压
> leftSide=`true`

- NOTE
<pre>源码解压

tar xzf redis-4.0.9.tar.gz</pre>

#### step3:移动
> leftSide=`true`

- NOTE
<pre>将解压过后的源码，放到usr/local/redis

sudo mv ./redis-4.0.9 /usr/local/redis/</pre>

#### step4:进入redis
> leftSide=`true`

- NOTE
<pre>进入redis文件夹内


cd /usr/local/redis/</pre>

#### step5:生成
> leftSide=`true`

- NOTE
<pre>编译源码，生成redis

sudo make</pre>

#### step6:测试
> leftSide=`true`

- NOTE
<pre>sudo make test</pre>

#### step7:安装
> leftSide=`true`

- NOTE
<pre>将redis的命令安装到/usr/local/bin/
sudo make install</pre>

#### step8:查看
> leftSide=`true`

- NOTE
<pre>进入目录/usr/local/bin中查看
cd /usr/local/bin
ls -all

redis-server redis服务器
redis-cli redis命令行客户端
redis-benchmark redis性能测试工具
redis-check-aof AOF文件修复工具
redis-check-rdb RDB文件检索工具</pre>

#### step9:配置
> leftSide=`true`

- NOTE
<pre>配置文件目录为/usr/local/redis/redis.conf

将redis文件夹中的配置文件移到linux系统配置文件夹中

以后开启redis-server 从系统配置文件夹中读取配置

sudo cp /usr/local/redis/redis.conf /etc/redis/</pre>

### Mac
> leftSide=`true`


#### 安装Homebrew
- LINK
<pre>https://brew.sh/</pre>

#### 使用brew安装Redis
> leftSide=`true`

- LINK
<pre>https://www.cnblogs.com/cloudshadow/p/mac_brew_install_redis.html</pre>

## Redis配置
> leftSide=`true`


### 配置文件
- NOTE
<pre>Redis的配置信息在/etc/redis/redis.conf下。

sudo vi /etc/redis/redis.conf</pre>

### 核心配置
> leftSide=`true`

- LINK
<pre>http://blog.csdn.net/ljphilp/article/details/52934933</pre>

#### 绑定IP
- NOTE
<pre>bind 127.0.0.1 
默认绑定本机ip,当需要远程访问，可将此行注释，或者绑定一个真实的 ip
</pre>

#### 端
> leftSide=`true`

- NOTE
<pre>默认端口 6379</pre>

#### 守护进程
> leftSide=`true`

- NOTE
<pre>
    如果以守护进程运⾏，则不会在命令⾏阻塞，类似于服务
    如果以⾮守护进程运⾏，则当前终端被阻塞
    设置为yes表示守护进程，设置为no表示⾮守护进程
    推荐设置为yes

    daemonize yes
</pre>

#### 数据文件
> leftSide=`true`

- NOTE
<pre>dbfilename dump.rdb</pre>

#### 数据文件存储路径
> leftSide=`true`

- NOTE
<pre>dir /var/lib/redis</pre>

#### 日志文件
> leftSide=`true`

- NOTE
<pre>logfile &quot;/var/log/redis/redis-server.log&quot;</pre>

#### 数据库
> leftSide=`true`

- NOTE
<pre>database 16
编号从0到15
打开redis
进入默认数据库为 0</pre>

#### 主从复制
> leftSide=`true`

- NOTE
<pre>双机备份
slaveof</pre>

## Redis数据结构
- LINK
<pre>http://redis.cn/commands.html</pre>
- NOTE
<pre>redis是key-value的数据结构，每条数据都是⼀个键值对
键的类型是字符串

注意：键不能重复

值的类型分为五种：

    字符串string
    哈希hash
    列表list
    集合set
    有序集合zset

</pre>

### String
- NOTE
<pre>字符串类型是 Redis 中最为基础的数据存储类型，
它在 Redis 中是二进制安全的，
这便意味着该类型可以接受任何格式的数据，
如JPEG图像数据或Json对象描述信息等。
在Redis中字符串类型的Value最多可以容纳的数据长度是512M。</pre>

#### 保存

##### 设置键值
- NOTE
<pre>set key value

例1：设置键为name值为itcast的数据

    set name itcast
</pre>

##### 设置键值及过期时间
- NOTE
<pre>setex key seconds value

例2：设置键为aa值为aa过期时间为3秒的数据

    setex aa 3 aa
</pre>

##### 设置多个键值
- NOTE
<pre>mset key1 value1 key2 value2 ...
例3：设置键为'a1'值为'python'、键为'a2'值为'java'、键为'a3'值为'c'

    mset a1 python a2 java a3 c
</pre>

##### 追加值
- NOTE
<pre>append key value

例4：向键为a1中追加值' haha'

    append 'a1' 'haha'
</pre>

#### 获取

##### 获取
- NOTE
<pre>get key

例5：获取键'name'的值

    get 'name'

</pre>

##### 获取多个键的多个值
- NOTE
<pre>mget key1 key2 ...

例6：获取键a1、a2、a3'的值

    mget a1 a2 a3
</pre>

#### 删除

##### 删除键
- NOTE
<pre>del key1 key2


</pre>

### Hash
- NOTE
<pre> hash⽤于存储对象，对象的结构为属性、值
    值的类型为string</pre>

#### 增加、修改
- NOTE
<pre>MISCONF Redis is configured to save RDB snapshots, 
but is currently not able to persist on disk. 
Commands that may modify the data set are disabled. 
Please check Redis logs for details about the error.

Redis被配置为保存数据库快照，
但它目前不能持久化到硬盘。
用来修改集合数据的命令不能用

原因：

    强制关闭Redis快照导致不能持久化。 解决方案：

    运行config set stop-writes-on-bgsave-error no　命令后，
    关闭配置项stop-writes-on-bgsave-error解决该问题。
</pre>

##### 设置单个属性
- NOTE
<pre>hset key field value

例1：设置键 user的属性name为itheima

    hset user name itheima
</pre>

##### 设置多个属性
- NOTE
<pre>hmset key field1 value1 field2 value2 ...

例2：设置键u2的属性name为itcast、属性age为11

    hmset u2 name itcast age 11
</pre>

#### 获取

##### 获取键的所有属性
- NOTE
<pre>hkeys key

例3：获取键u2的所有属性

    hkeys u2
</pre>

##### 获取 某一个属性的值
- NOTE
<pre>hget key field

例4：获取键u2属性'name'的值

    hget u2 'name'
</pre>

##### 获取多个属性的值
- NOTE
<pre>hmget key field1 field2 ...

例5：获取键u2属性'name'、'age的值

    hmget u2 name age
</pre>

##### 获取所有属性的值
- NOTE
<pre>hvals key

例6：获取键'u2'所有属性的值

    hvals u2
</pre>

#### 删除

##### 删除整个hash键及值
- NOTE
<pre>del key</pre>

##### 删除属性
- NOTE
<pre>hdel key field1 field2 ...

例7：删除键'u2'的属性'age'

    hdel u2 age
</pre>

### List
- NOTE
<pre>列表的元素类型为string

按照插⼊顺序排序
</pre>

#### 增加

##### 左侧插入
- NOTE
<pre>lpush key value1 value2 ...

例1：从键为'a1'的列表左侧加⼊数据a 、 b 、c

    lpush a1 a b c
</pre>

##### 右侧插入
- NOTE
<pre>rpush key value1 value2 ...

例2：从键为'a1'的列表右侧加⼊数据0 1

    rpush a1 0 1
</pre>

##### 指定元素前后插入
- NOTE
<pre>linsert key before或after 现有元素 新元素

例3：在键为'a1'的列表中元素'b'前加⼊'3'

    linsert a1 before b 3
</pre>

#### 获取
- NOTE
<pre>start、stop为元素的下标索引

索引从左侧开始，第⼀个元素为0

索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素
</pre>

##### 返回指定范围的元素
- NOTE
<pre>lrange key start stop

例4：获取键为'a1'的列表所有元素

    lrange a1 0 -1
</pre>

#### 改
- NOTE
<pre>索引从左侧开始，第⼀个元素为0

索引可以是负数，表示尾部开始计数，如-1表示最后⼀个元素

    lset key index value

例5：修改键为'a1'的列表中下标为1的元素值为'z'

    lset a 1 z
</pre>

#### 删除
- NOTE
<pre>
    将列表中前count次出现的值为value的元素移除
    count &gt; 0: 从头往尾移除
    count &lt; 0: 从尾往头移除
    count = 0: 移除所有
</pre>

##### 删除指定元素
- NOTE
<pre>lrem key count value

例6.1：向列表'a2'中加⼊元素'a'、'b'、'a'、'b'、'a'、'b'

    lpush a2 a b a b a b

例6.2：从'a2'列表右侧开始删除2个'b'

    lrem a2 -2 b

例6.3：查看列表'py12'的所有元素

    lrange a2 0 -1
</pre>

### Set
- NOTE
<pre>无序集合
元素为string类型
元素具有唯⼀性，不重复
说明：对于集合没有修改操作
</pre>

#### 增加
- NOTE
<pre>sadd key member1 member2 ...

例1：向键'a3'的集合中添加元素'zhangsan'、'lisi'、'wangwu'

    sadd a3 zhangsan sili wangwu
</pre>

#### 获取
- NOTE
<pre>smembers key

例2：获取键'a3'的集合中所有元素

    smembers a3
</pre>

#### 删除
- NOTE
<pre>srem key

例3：删除键'a3'的集合中元素'wangwu'

    srem a3 wangwu
</pre>

### Zset
- NOTE
<pre>sorted set，有序集合
元素为string类型
元素具有唯⼀性，不重复
每个元素都会关联⼀个double类型的score，表示权重，通过权重将元素从⼩到⼤排序
说明：没有修改操作
</pre>

#### 增加
- NOTE
<pre>zadd key score1 member1 score2 member2 ...

例1：向键'a4'的集合中添加元素'lisi'、'wangwu'、'zhaoliu'、'zhangsan'，
权重分别为4、5、6、3

    zadd a4 4 lisi 5 wangwu 6 zhaoliu 3 zhangsan

</pre>

#### 获取
- NOTE
<pre>返回指定范围内的元素
start、stop为元素的下标索引
索引从左侧开始，第⼀个元素为0

索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素</pre>

##### 获得指定范围的元素
- NOTE
<pre>zrange key start stop

例2：获取键'a4'的集合中所有元素

    zrange a4 0 -1
</pre>

##### 返回score值在min和max之间的成员
- NOTE
<pre>zrangebyscore key min max

例3：获取键'a4'的集合中权限值在5和6之间的成员

    zrangebyscore a4 5 6
</pre>

##### 返回成员member的score值
- NOTE
<pre>zscore key member

例4：获取键'a4'的集合中元素'zhangsan'的权重

    zscore a4 zhangsan
</pre>

#### 删除

##### 删除指定元素
- NOTE
<pre>zrem key member1 member2 ...

例5：删除集合'a4'中元素'zhangsan'

    zrem a4 zhangsan
</pre>

##### 删除权重在指定范围的元素
- NOTE
<pre>zremrangebyscore key min max

例6：删除集合'a4'中权限在5、6之间的元素

    zremrangebyscore a4 5 6
</pre>

## 与python的交互
> leftSide=`true`


### 安装包
- LINK
<pre>https://github.com/andymccurdy/redis-py</pre>

#### 虚拟环境，联网安装redis

##### pip install redis

#### 虚拟环境联网安装包
> leftSide=`true`


##### easy\_install redis

#### redis包的源码，源码安装
> leftSide=`true`

- NOTE
<pre>一步步执行 wget https://github.com/andymccurdy/redis-py/archive/master.zip
unzip master.zip
cd redis-py-master
sudo python setup.py install</pre>

### 调用模块 
> leftSide=`true`


#### 引入模块
- NOTE
<pre>这个模块中提供了StrictRedis对象(Strict严格)，⽤
用于连接redis服务器，
并按照不同类型提供 了不同方法，进行交互操作</pre>

##### from redis import \*

### StrictRedis对象
> leftSide=`true`


#### 创建对象
- NOTE
<pre>通过init创建对象，
指定参数host、port与指定的服务器和端⼝连接，
host默认为localhost，port默认为6379，db默认为0

sr = StrictRedis(host = 'localhost' ,port = 6379 , db=0)

简写

sr = StrictRedis()

</pre>

##### string

###### set

###### setx
> leftSide=`true`


###### mset
> leftSide=`true`


###### append
> leftSide=`true`


###### get
> leftSide=`true`


###### mget
> leftSide=`true`


###### key
> leftSide=`true`


##### keys
> leftSide=`true`


###### exists

###### type
> leftSide=`true`


###### delete
> leftSide=`true`


###### expire
> leftSide=`true`


###### getrange
> leftSide=`true`


###### ttl
> leftSide=`true`


##### hash
> leftSide=`true`


###### hset

###### hmset
> leftSide=`true`


###### hkeys
> leftSide=`true`


###### hget
> leftSide=`true`


###### hmget
> leftSide=`true`


###### hvals
> leftSide=`true`


###### hdel
> leftSide=`true`


##### list
> leftSide=`true`


###### lpush

###### rpush

###### linsert
> leftSide=`true`


###### lrange
> leftSide=`true`


###### lset
> leftSide=`true`


###### lrem
> leftSide=`true`


##### set
> leftSide=`true`


###### sadd

###### smembers

###### srem
> leftSide=`true`


##### zset
> leftSide=`true`


###### zadd

###### zrange
> leftSide=`true`


###### zrangebyscore
> leftSide=`true`


###### zscore
> leftSide=`true`


###### zrem
> leftSide=`true`


###### zremrangebyscore
> leftSide=`true`

